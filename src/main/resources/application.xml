<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:task="http://www.springframework.org/schema/task"
		xmlns:util="http://www.springframework.org/schema/util"
         xsi:schemaLocation="
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.1.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
         http://www.springframework.org/schema/task
         http://www.springframework.org/schema/task/spring-task-3.1.xsd
         http://www.springframework.org/schema/util
		 http://www.springframework.org/schema/util/spring-util-3.1.xsd">
		 
		 <bean id="hello" class="cn.tedu.bean.HelloSpring"></bean>
		 <bean id="hi" class="cn.tedu.bean.HelloMM"></bean>
		 <bean id="login" class="cn.tedu.dao.UserDaoImpl"></bean>
		  <!-- 
		       1.bean 节点表示用来创建对象
		       2.id表示在bean对象在spring 容器中的唯一标示
		       3.class 表示用来创建对象的类
		       
		  -->
		  <!-- 抽象类使用静态工厂的方法实例化对象 
		             这个类不能通过构造方法获取对象，但是提供一个静态方法可以获取到对象
		             factory-method 指定能获取到对象的抽象方法（自动调用   ）
		             不能直接创建对象 -->
		  <bean id="factory" class="java.util.Calendar" factory-method="getInstance"> </bean>
		  
		  
		  <!-- 使用实例化工厂方法实例对象 
		                  这个类不能通过构造方法获取对象
		                  但是它提供了一个方法可以获取到我们需要的对象
		                  factory-method指定能获取到对象的方法
		                  factory-bean指定去调用能获取到factory-method的对象方法的对象
		  -->
		  
		  <bean id="factorybean" class="cn.tedu.bean.FactoryBean"></bean>
		  <bean id="c" factory-method="getC" factory-bean="factorybean"></bean>
		  
		  <!-- Bean的生命周期方法 
		          
		       	  
		  -->
		  
		  <bean id="beanlife" class="cn.tedu.bean.BeanLife"
		           init-method="init"  destroy-method="destroy"
		  
		  ></bean>
</beans>
